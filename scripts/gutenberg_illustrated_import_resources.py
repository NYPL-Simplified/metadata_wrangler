"""Import links to covers generated by Gutenberg Illustrated."""
import os
import site
import sys
from nose.tools import set_trace

d = os.path.split(__file__)[0]
site.addsitedir(os.path.join(d, ".."))
from model import (
    DataSource,
    LicensePool,
    Resource,
    WorkIdentifier,
    production_session,
)

class Importer(object):

    MEDIA_TYPE = "image/png"
    IMAGE_HEIGHT = 300
    IMAGE_WIDTH = 200

    def __init__(self, _db):

        self._db = _db
        self.pools = dict()
        self.gutenberg_source = DataSource.lookup(self._db, DataSource.GUTENBERG)
        self.gutenberg_illustrated_source = DataSource.lookup(
            self._db, DataSource.GUTENBERG_COVER_GENERATOR)

    def import_cover(self, gutenberg_id, url):
        if gutenberg_id in self.pools:
            pool, identifier = self.pools[gutenberg_id]
        else:
            identifier, ignore = WorkIdentifier.for_foreign_id(
                self._db, WorkIdentifier.GUTENBERG_ID, gutenberg_id,
                autocreate=False)
            pool = self._db.query(LicensePool).filter(
                LicensePool.identifier==identifier).filter(
                    LicensePool.data_source==self.gutenberg_source).one()
            self.pools[gutenberg_id] = (pool, identifier)

        resource, new = identifier.add_resource(
            Resource.IMAGE, url, self.gutenberg_illustrated_source, pool,
            self.MEDIA_TYPE)
        if new:
            resource.mirrored_to(url, self.MEDIA_TYPE)
            resource.image_width= self.IMAGE_WIDTH
            resource.image_height = self.IMAGE_HEIGHT
        return new

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print "Usage: %s [import file.tsv]" % sys.argv[0]
        sys.exit()
    path = sys.argv[1]      
    _db = production_session()
    importer = Importer(_db)
    a = 0
    old_id = None
    for i in open(path):
        id, url = i.strip().split("\t")
        if id != old_id:
            print id
            old_id = id
        was_new = importer.import_cover(id, url)
        if was_new:
            a += 1
            if not a % 100:
                print a
                _db.commit()
